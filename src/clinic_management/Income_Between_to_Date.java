
package clinic_management;

import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author mayur
 */
public class Income_Between_to_Date extends javax.swing.JFrame {

    /** Creates new form Search_Expence_Between_to_Date */
    public Connection c;
    public Statement st;
    public ResultSet rs1,rs2;
     PreparedStatement pre,pre1;
    int count=0,total_income=0,total_expence=0,flag_type1,final_expence=0,final_income=0;
    String Item_List_String[],header[];
    Object alldata[][];
    public Income_Between_to_Date(int flag_type) {
        initComponents();
        header=new String [] {"Number","Date ","Number of Patient","Income","Expence","Profit"};
        flag_type1=flag_type;
        if(flag_type1==1)
        {
            Second_Panel.setVisible(false);            
        }      
        java.util.Date current=new java.util.Date();
        int d=current.getDate();
        Date_Start.setSelectedIndex(d);
        Date_End.setSelectedIndex(d);
        int m=current.getMonth();
        Month_Start.setSelectedIndex(m+1);
        Month_End.setSelectedIndex(m+1);
        int y=current.getYear();
        Year_Start.setSelectedIndex(y-106);
        Year_End.setSelectedIndex(y-106);
        
        try
        {
                Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                c=DriverManager.getConnection("jdbc:odbc:Clinic_Management");
                System.out.println("Connection established.");
                st=(Statement) c.createStatement();
                
        }
        catch(Exception e){
                Dialog_class.Old_Patient_Dialog n=new Dialog_class.Old_Patient_Dialog(this, true,"Error in DataBase..So try Again...");
                n.setVisible(true);

         }
        alldata=new Object[1][6];
        Expence_table.setModel(new javax.swing.table.DefaultTableModel(alldata,header));
          
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Date_Start = new javax.swing.JComboBox();
        Month_Start = new javax.swing.JComboBox();
        Year_Start = new javax.swing.JComboBox();
        Find = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        Expence_table = new javax.swing.JTable();
        OK = new javax.swing.JButton();
        Second_Panel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        Date_End = new javax.swing.JComboBox();
        Year_End = new javax.swing.JComboBox();
        Month_End = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Clinic_Management");

        jPanel1.setBackground(new java.awt.Color(255, 204, 204));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36));
        jLabel1.setText("-::- Select Date  -::- ");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel2.setText("Start Date");

        Date_Start.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Date_Start.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Date", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        Month_Start.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Month_Start.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Month", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));

        Year_Start.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Year_Start.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Year", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025" }));

        Find.setBackground(new java.awt.Color(51, 255, 255));
        Find.setFont(new java.awt.Font("Tahoma", 1, 18));
        Find.setIcon(new javax.swing.ImageIcon(getClass().getResource("/clinic_management/buttons/Find.jpg"))); // NOI18N
        Find.setBorderPainted(false);
        Find.setContentAreaFilled(false);
        Find.setDefaultCapable(false);
        Find.setFocusPainted(false);
        Find.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FindActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel5.setText("Your search result are following....");

        jSeparator1.setBackground(new java.awt.Color(51, 255, 255));
        jSeparator1.setForeground(new java.awt.Color(51, 255, 255));

        Expence_table.setBackground(new java.awt.Color(255, 255, 204));
        Expence_table.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 0)));
        Expence_table.setFont(new java.awt.Font("Tahoma", 1, 11));
        Expence_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Expence_table.setIntercellSpacing(new java.awt.Dimension(3, 3));
        Expence_table.setRowHeight(22);
        jScrollPane1.setViewportView(Expence_table);

        OK.setBackground(new java.awt.Color(51, 255, 255));
        OK.setFont(new java.awt.Font("Tahoma", 1, 18));
        OK.setIcon(new javax.swing.ImageIcon(getClass().getResource("/clinic_management/buttons/OK.jpg"))); // NOI18N
        OK.setBorderPainted(false);
        OK.setContentAreaFilled(false);
        OK.setDefaultCapable(false);
        OK.setFocusPainted(false);
        OK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKActionPerformed(evt);
            }
        });

        Second_Panel.setBackground(new java.awt.Color(255, 204, 204));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel3.setText("End Date");

        Date_End.setFont(new java.awt.Font("Tahoma", 1, 18));
        Date_End.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Date", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        Date_End.setSelectedIndex(15);

        Year_End.setFont(new java.awt.Font("Tahoma", 1, 18));
        Year_End.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Year", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025" }));
        Year_End.setSelectedIndex(4);

        Month_End.setFont(new java.awt.Font("Tahoma", 1, 18));
        Month_End.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Month", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        Month_End.setSelectedIndex(8);

        javax.swing.GroupLayout Second_PanelLayout = new javax.swing.GroupLayout(Second_Panel);
        Second_Panel.setLayout(Second_PanelLayout);
        Second_PanelLayout.setHorizontalGroup(
            Second_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Second_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Date_End, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Month_End, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Year_End, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
        Second_PanelLayout.setVerticalGroup(
            Second_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Second_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Second_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(Date_End, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Year_End, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Month_End, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jLabel2)
                        .addGap(43, 43, 43)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Find)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Date_Start, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Month_Start, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Year_Start, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Second_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(358, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addContainerGap(860, Short.MAX_VALUE))
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1183, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1183, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(507, 507, 507)
                .addComponent(OK)
                .addContainerGap(577, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(Month_Start, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Year_Start, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Date_Start, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(Find, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(Second_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(OK)
                .addContainerGap(61, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKActionPerformed
        try {
            // TODO add your handling code here:
            c.close();
        } catch (SQLException ex) {
            Logger.getLogger(Search_Expence_Between_to_Date.class.getName()).log(Level.SEVERE, null, ex);
        }
        Welcome_Page n = new Welcome_Page();
        n.setSize(clinic_management.Main.d.width,clinic_management.Main.d.height-40);
        n.setVisible(true);
        dispose();
    }//GEN-LAST:event_OKActionPerformed

    private void FindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FindActionPerformed
        // TODO add your handling code here:
        java.sql.Date EndDate = null;
        total_income=0;
        total_expence=0;
        final_expence=0;
        final_income=0;
        alldata=null;
        try{
            int sd=Integer.parseInt((String)Date_Start.getSelectedItem());
            int sm=Integer.parseInt((String)Month_Start.getSelectedItem());
            int sy=Integer.parseInt((String)Year_Start.getSelectedItem());
            java.sql.Date StartDate=new java.sql.Date(sy-1900,sm-1,sd);
            if(flag_type1==2)
            {
                int ed = Integer.parseInt((String) Date_End.getSelectedItem());
                int em=Integer.parseInt((String)Month_End.getSelectedItem());
                int ey=Integer.parseInt((String)Year_End.getSelectedItem());
                EndDate=new java.sql.Date(ey-1900,em-1,ed);
                if(0<(StartDate.compareTo(EndDate)))
                {
                    throw new ArithmeticException();
                }
            }
            
           
           if(flag_type1==1)
           {
               pre = c.prepareStatement("Select * from Diagosis_Details_All_Patient where Date_Of_Entry=?");
               pre.setDate(1, StartDate);
               
               alldata=new Object[1][6];
               for(int i=0;i<1;i++)
                   for(int j=0;j<6;j++)
                       alldata[i][j]=null;
               count=0;
               rs1=pre.executeQuery();
               while(rs1.next())
               {
                   count++;
                  total_income+=rs1.getInt(6);
               }
               pre1 = c.prepareStatement("Select * from Extra_Expence where Date_Payment=?");
               pre1.setDate(1, StartDate);
               rs2=pre1.executeQuery();
               while(rs2.next())
               {
                  total_expence+=rs2.getInt(6);
               }
               alldata[0][0]=""+1;
               alldata[0][1]=StartDate.getDate()+"-"+(StartDate.getMonth()+1)+"-"+(StartDate.getYear()+1900);
               alldata[0][2]=" "+count;
               alldata[0][3]=" "+total_income;
               alldata[0][4]=" "+total_expence;
               alldata[0][5]=" "+(total_income-total_expence);
           }
           else
           {
               pre = c.prepareStatement("Select * from Diagosis_Details_All_Patient where Date_Of_Entry>=? and Date_Of_Entry<=? order by Date_Of_Entry");
               pre.setDate(1, StartDate);
               pre.setDate(2, EndDate);
               rs1=pre.executeQuery();
               count=0;
               int size=1;
               while(rs1.next())
               {
                   //size++;
                   count++;
                   java.sql.Date Current_Date=rs1.getDate(2);
                   while(rs1.next())
                   {
                       java.sql.Date Second_Date=rs1.getDate(2);
                       if(Current_Date.equals(Second_Date))
                       {
                           //size++;
                           count++;
                       }
                       else
                       {
                            System.out.println("number "+ count);
                            count=1;
                            size++;
                            break;
                       }
                   }
               }
            System.out.println("number "+ count+"  size of array   "+size);
            alldata=new Object[size+2][6];
            for(int i=0;i<size+2;i++)
               for(int j=0;j<6;j++)
                   alldata[i][j]=null;


               int patient=0;
               rs1=pre.executeQuery();
               count=0;
               total_income=0;
               final_income=0;
               patient=0;
               int total_patient=0,exe=0;
               java.sql.Date Current_Date = null;
               java.sql.Date Second_Date=null;
               while(rs1.next())
               {

                   patient++;
                   total_patient++;
                   Current_Date=rs1.getDate(2);
                   alldata[count][0]=""+(count+1);
                   alldata[count][1]=Current_Date.getDate()+"-"+(Current_Date.getMonth()+1)+"-"+(Current_Date.getYear()+1900);
                   int inc=rs1.getInt(6);
                   total_income+=inc;
                   final_income+=inc;
                  

                   while(rs1.next())
                   {
                       Second_Date=rs1.getDate(2);
                       if(Current_Date.equals(Second_Date))
                       {
                           patient++;
                           total_patient++;
                           inc=rs1.getInt(6);
                           total_income+=inc;
                            final_income+=inc;
                       }
                       else
                       {
                               pre1 = c.prepareStatement("Select * from Extra_Expence where Date_Payment=?");
                           pre1.setDate(1, Current_Date);
                           rs2=pre1.executeQuery();
                           while(rs2.next())
                           {
                              total_expence+=rs2.getInt(6);
                           }
                           final_expence+=total_expence;

                            System.out.println("number "+ count);
                            alldata[count][2]=""+patient;
                            alldata[count][3]=""+total_income;
                            alldata[count][4]=""+total_expence;
                            alldata[count][5]=""+(total_income-total_expence);
                            total_income=0;
                            total_expence=0;
                            inc=rs1.getInt(6);
                            total_income+=inc;
                            final_income+=inc;

                            count++;
                            patient=1;
                            total_patient++;
                            break;
                       }
                   }
               }
               alldata[count][0]=""+(count+1);
               alldata[count][1]=Second_Date.getDate()+"-"+(Second_Date.getMonth()+1)+"-"+(Second_Date.getYear()+1900);
               alldata[count][2]=""+patient;
               alldata[count][3]=""+total_income;

               pre1 = c.prepareStatement("Select * from Extra_Expence where Date_Payment=?");
                pre1.setDate(1, Second_Date);
                rs2=pre1.executeQuery();
                while(rs2.next())
                {
                  total_expence+=rs2.getInt(6);
                }
                final_expence+=total_expence;
               alldata[count][4]=""+total_expence;
               alldata[count][5]=""+(total_income-total_expence);

               alldata[count+2][1]="total";
               alldata[count+2][2]=""+total_patient;
               alldata[count+2][3]=""+final_income;
               alldata[count+2][4]=""+final_expence;
               alldata[count+2][5]=""+(final_income-final_expence);
           }
           Expence_table.setModel(new javax.swing.table.DefaultTableModel(alldata,header));   
        }
        catch(NumberFormatException ee)
        {
            Expence_table.setModel(new javax.swing.table.DefaultTableModel(new Object [][] { {null, null, null, null,null,null} },header));
            Dialog_class.Old_Patient_Dialog n=new Dialog_class.Old_Patient_Dialog(this, true,"Please,Select your date....");
            n.setVisible(true);             
        }
        catch(ArithmeticException ee)
        {
            Expence_table.setModel(new javax.swing.table.DefaultTableModel(new Object [][] { {null, null, null, null,null,null} },header));
            Dialog_class.Old_Patient_Dialog n=new Dialog_class.Old_Patient_Dialog(this, true,"Please,Select your date proper way....");
            n.setVisible(true);            
        }
        catch(Exception e)
        {
            System.out.print(e);
           Dialog_class.Old_Patient_Dialog n=new Dialog_class.Old_Patient_Dialog(this, true,"Error in DataBase..So try Again...");
            n.setVisible(true);
        }
    }//GEN-LAST:event_FindActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Income_Between_to_Date(2).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox Date_End;
    private javax.swing.JComboBox Date_Start;
    private javax.swing.JTable Expence_table;
    private javax.swing.JButton Find;
    private javax.swing.JComboBox Month_End;
    private javax.swing.JComboBox Month_Start;
    private javax.swing.JButton OK;
    private javax.swing.JPanel Second_Panel;
    private javax.swing.JComboBox Year_End;
    private javax.swing.JComboBox Year_Start;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables

}
